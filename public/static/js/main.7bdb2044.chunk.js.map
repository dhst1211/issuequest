{"version":3,"sources":["Home.tsx","Issue/Issue.tsx","Issue/Repo.tsx","Dashboard.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Home","useState","isAuthed","setIsAuthed","useEffect","axios","get","then","res","data","authenticated","catch","error","className","href","data-target","id","to","Issue","props","issue","url","target","rel","issueNumber","title","noAssignees","bodyText","publishedAt","updatedAt","Repo","repoIssue","hasLabeledIssue","nameWithOwner","stargazersCount","location","homepageUrl","primaryLanguage","name","languages","map","lang","repositoryTopics","topic","description","goodFirstIssuesObj","labeledIssueCount","labeledIssuesList","key","helpWantedIssueObj","Dashboard","meta","setMeta","issuesPerRepo","setIssuesPerRepo","repo","setRepo","starredRepoCount","issueResult","hasNextPage","endCursor","window","_","onClick","e","params","staredReposEndCursor","App","exact","path","component","Boolean","hostname","match","httpLink","createHttpLink","uri","authLink","setContext","headers","token","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.7bdb2044.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport {\n  Link\n} from \"react-router-dom\";\n\n//const GITHUB_LOGIN_URL: string = `${process.env.REACT_APP_SERVER_LOCATION}/auth/github`\nconst GITHUB_LOGIN_URL: string = '/auth/github'\n\nfunction Home() {\n  const [isAuthed, setIsAuthed] = useState<boolean>(false);\n\n  useEffect(() => {\n    axios.get('/check')\n      .then(res => {\n        setIsAuthed(res.data.authenticated);\n      })\n      .catch((error) => {\n        //if(error.response.status === 401) {\n          setIsAuthed(false)\n        //}\n    });\n  }, []);\n\n  // return (\n  //   <div>\n  //     {isAuthed ? (\n  //       <Link to=\"/dashboard\" className=\"button is-primary\">\n  //         To dashboard\n  //       </Link>\n  //     ) : (\n  //       <a href={GITHUB_LOGIN_URL}>\n  //         Github login\n  //       </a>\n  //     )}\n  //   </div>\n  // );\n\n\n  return (\n    <section className=\"hero is-success is-fullheight is-bold\">\n      <div className=\"hero-head\">\n        <header className=\"navbar\">\n          <div className=\"container\">\n            <div className=\"navbar-brand\">\n              <a className=\"navbar-item\" href=\"\">\n                <h1>Stars</h1>\n              </a>\n              <span className=\"navbar-burger burger\" data-target=\"navbarMenuHeroC\">\n                <span></span>\n                <span></span>\n                <span></span>\n              </span>\n            </div>\n            <div id=\"navbarMenuHeroC\" className=\"navbar-menu\">\n              <div className=\"navbar-end\">\n                <a className=\"navbar-item is-active\" href=\"\">\n                  Home\n                </a>\n                <a className=\"navbar-item\" href=\"\">\n                  Examples\n                </a>\n                <a className=\"navbar-item\" href=\"\">\n                  Documentation\n                </a>\n                <span className=\"navbar-item\">\n                  <a className=\"button is-success is-inverted\" href=\"\">\n                    <span className=\"icon\">\n                      <i className=\"fab fa-github\"></i>\n                    </span>\n                    <span>Download</span>\n                  </a>\n                </span>\n              </div>\n            </div>\n          </div>\n        </header>\n      </div>\n\n      <div className=\"hero-body\">\n        <div className=\"container has-text-centered\">\n          <h1 className=\"title\">\n            Check new issues\n          </h1>\n          {isAuthed ? (\n            <Link to=\"/dashboard\" className=\"button is-warning\">\n              To dashboard\n            </Link>\n          ) : (\n            <a href={GITHUB_LOGIN_URL}>\n              Github login\n            </a>\n          )}\n        </div>\n      </div>\n\n      <div className=\"hero-foot\">\n        <nav className=\"tabs\">\n          <div className=\"container\">\n            <ul>\n              <li className=\"is-active\"><a>Overview</a></li>\n              <li><a href=\"\">Modifiers</a></li>\n              <li><a href=\"\">Grid</a></li>\n              <li><a href=\"\">Elements</a></li>\n              <li><a href=\"\">Components</a></li>\n              <li><a href=\"\">Layout</a></li>\n            </ul>\n          </div>\n        </nav>\n      </div>\n    </section>\n  )\n}\n\nexport default Home;","import React from 'react';\n\nimport './Issue.scss';\n\ninterface Props {\n  issue: any;\n}\n\nconst Issue: React.FC<Props> = (props) => {\n\n  const { issue } = props;\n\n  return (\n    <article className=\"message\">\n      <div className=\"message-header\">\n        <a href={issue.url} target=\"_blank\" rel=\"noopener noreferrer\">\n          #{issue.issueNumber}: {issue.title}\n        </a>\n        {issue.noAssignees && <span className=\"tag is-success\">No Assignees</span>}\n      </div>\n      <div className=\"message-body\">\n        {issue.bodyText}\n        <p className=\"issue-date\">published: {issue.publishedAt}/ updated: {issue.updatedAt}</p>\n      </div>\n    </article>\n  )\n}\n\nexport default Issue;\n","import React from 'react';\n\nimport Issue from './Issue';\nimport './Repo.scss';\n\ninterface Props {\n  repoIssue: any;\n}\n\nconst Repo: React.FC<Props> = (props) => {\n\n  const { repoIssue } = props\n\n  if(!repoIssue.hasLabeledIssue){\n    return (\n      <div className=\"card mt-4\">\n        <header className=\"card-header\">\n          <p className=\"card-header-title card-header-title-no-issue\">\n            {repoIssue.nameWithOwner}\n          </p>\n        </header>\n        {/* <div className=\"card-content\">\n          <div className=\"content\">\n            <p>No issue</p>\n          </div>\n        </div> */}\n        {/* <footer className=\"card-footer\">\n          <p className=\"card-footer-item\">\n            <span>\n              Primary Language: {repoIssue?.primaryLanguage?.name}\n            </span>\n          </p>\n          <p className=\"card-footer-item\">\n            <span>\n              Stargazers Count: {repoIssue.stargazersCount}\n            </span>\n          </p>\n        </footer> */}\n      </div>\n    )\n  } \n\n  return (\n    <div className=\"card mt-4\">\n      <header className=\"card-header\">\n        <div className=\"card-header-title card-header-title-css\">\n          <a href={repoIssue.url} target=\"_blank\" rel=\"noopener noreferrer\">{repoIssue.nameWithOwner}</a>\n          <span className=\"star\"><i className=\"far fa-star\"></i>{repoIssue.stargazersCount}</span>\n          <div className=\"card-header-left\">\n            {repoIssue.location && <span className=\"location\"><i className=\"fas fa-map-marker-alt\"></i> {repoIssue.location}</span>}\n            {repoIssue.homepageUrl && <a href={repoIssue.homepageUrl} target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fas fa-home\"></i></a>}\n          </div>\n        </div>\n      </header>\n      <div className=\"card-content\">\n        <div className=\"content\">\n          <p>\n            {repoIssue.primaryLanguage && repoIssue.primaryLanguage.name &&\n              <span className=\"tag is-primary\">Primary: {repoIssue.primaryLanguage.name}</span>} \n            {repoIssue.languages.map((lang: string) => (\n              <span className=\"tag is-primary is-light\">{lang}</span>\n            ))}\n          </p>\n          <p>\n            {repoIssue.repositoryTopics.map((topic: string) => (\n              <span className=\"tag is-info is-light\">{topic}</span>\n            ))}\n          </p>\n          <p>{repoIssue.description}</p>\n\n          {repoIssue?.goodFirstIssuesObj?.labeledIssueCount && (\n            <p className=\"has-text-centered is-uppercase has-text-weight-semibold\">\n              Good First Issues\n              <span className=\"tag is-info ml-3\">\n                {repoIssue?.goodFirstIssuesObj?.labeledIssueCount} issues\n              </span>\n            </p>\n          )}\n          {\n            repoIssue?.goodFirstIssuesObj?.labeledIssuesList.map((issue) => {\n              return (\n                <Issue key={issue.issueNumber} issue={issue} />\n              )\n          })}\n          \n          {repoIssue?.helpWantedIssueObj?.labeledIssueCount && (\n            <p className=\"has-text-centered is-uppercase has-text-weight-semibold\">\n              Help wanted\n              <span className=\"tag is-info ml-3\">\n                {repoIssue?.helpWantedIssueObj?.labeledIssueCount} issues\n              </span>\n            </p>\n          )}\n          {\n            repoIssue?.helpWantedIssueObj?.labeledIssuesList.map((issue) => {\n              return (\n                <Issue key={issue.issueNumber} issue={issue} />\n              )\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Repo;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport { loadavg } from 'os';\n\nimport IssueRepo from './Issue/Repo'\nimport './Dashboard.scss';\n\ninterface IMeta {\n  starredRepoCount: number;\n  hasNextPage: boolean;\n  endCursor: string;\n}\n\ninterface IRepo {\n  repoData: object;\n  issueResult: any;\n}\n\nconst Dashboard: React.FC = () => {\n\n  const [meta, setMeta] = useState<IMeta | null>(null);\n  const [issuesPerRepo, setIssuesPerRepo] = useState<any[]>([]);\n  const [repo, setRepo] = useState<IRepo | null>(null);\n\n  useEffect(() => {\n    axios.get('/repo')\n      .then(res => {\n        setRepo(res.data);\n        setMeta({\n          starredRepoCount: res.data.issueResult.starredRepoCount,\n          hasNextPage: res.data.issueResult.hasNextPage,\n          endCursor: res.data.issueResult.endCursor\n        });\n        setIssuesPerRepo(res.data.issueResult.issuesPerRepo)\n      })\n      .catch((error) => {\n        window.location.href = '/'\n      });\n  }, []);\n\n  const loadMore = (e) => {\n    axios.get('/repo', {\n      params: {\n        staredReposEndCursor: meta?.endCursor\n      }\n    })\n    .then(res => {\n      setRepo(res.data);\n      setMeta({\n        starredRepoCount: res.data.issueResult.starredRepoCount,\n        hasNextPage: res.data.issueResult.hasNextPage,\n        endCursor: res.data.issueResult.endCursor\n      });\n      setIssuesPerRepo([...issuesPerRepo, ...res.data.issueResult.issuesPerRepo])\n    })\n    .catch((error) => {\n      window.location.href = '/'\n    });\n  }\n\n  if(!repo){\n    return (\n      <div>\n        loading\n      </div>\n    )\n  }\n\n  return (\n    <div >\n      <section className=\"hero is-primary is-bold\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">\n              Your Stared Repo\n            </h1>\n            <h2 className=\"subtitle\">\n              Total Count: {repo.issueResult.starredRepoCount}\n            </h2>\n          </div>\n        </div>\n      </section>\n      <section className=\"section\">\n        {_.get(repo, 'repoData.data.viewer.name', 'Loading')}\n        {issuesPerRepo.map((repoIssue) => {\n          return <IssueRepo key={repoIssue.nameWithOwner} repoIssue={repoIssue} />\n        })}\n      </section>\n      <button onClick={loadMore}>\n        Load more\n      </button>\n    </div>\n  );\n}\n\nexport default Dashboard;","import React from 'react';\nimport './App.css';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n} from \"react-router-dom\";\n\nimport Home from './Home';\nimport Dashboard from './Dashboard'\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/dashboard\" component={Dashboard} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ApolloClient } from 'apollo-boost'\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport 'bulma/css/bulma.css'\n\nconst httpLink = createHttpLink({\n  uri: 'https://api.github.com/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = \"b9a77c1901de90d3d02988424a13b7be7b01bcdc\"\n\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}